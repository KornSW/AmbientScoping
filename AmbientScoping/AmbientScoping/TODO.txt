idee Extension


.PullSingleton()


singleton: IInstanceHandlingStrategy (hier kann ein scopefx eingehängt werden) >> default ist appdmain

(für jedn contrsuktor wird dan nauch ein pull erzeugt!!!)



singleton.instancdehandlingstrategy(  = nrw strat (dfefaultscope=profile
singleton.instancdehandlingstrategy(wenn sopefy).setScope(of Iassemblyindexer)(profile)

singleton.typeresolvingstrategy.mapconcrete(of Iassemblyindexer,TxComposcoed)(profile)
singleton.typeresolvingstrategy.mapconcrete(of assemblyindexer,TxComposcoed)(profile)

singleton.typeresolvingmethod = function()  compontdiscovery.resolve!!!


-----------------------------------------------------------------------------------------------------




CallScope -> AmbientContext.BoundProfileHandle = ID


ProfileScope (nutzt  AmbientContext.BoundProfileHandle als diskriminator) 


UNBEDINGT SNAPSHOT UND RESOTRE FUNKTIONEN

UNBEDINGT SYYMETRISCH MIT CLEANUP


Serviceparemas.ProfileContext transportkapsel
Serviceparemas.AmbientContext transportkapsel

Scope.GetSingleton(OF T)(profilescope.current)


profilescope.current [ext].Context
profilecontext.current -> ScopedSinglton.GetOrCreateInstance(OF profilecontext)(


profilescope implements IScopedSingletonContainer



ScopedSinglton.GetOrCreateInstance(OF Imyservice)(
  profilescope.current,
  [initializer] function()                                                    constructor-arg-getter
    ActivationHooks.RegisterFactory(Of IMyService)(type , function() {constructorarg1, constructorarg2}).StrongerThan("typename1","typename2")
                                                                                                        .StrongerThan(typex)
                                                                                                        .Strongest
    Return IMyService.Activate()
  end function
)


IMyService.Activate()


ScopedSinglton.GetOrCreateInstance(OF Imyservice)(
ScopedSinglton.GetInstance(OF Imyservice)(profilescope.current   -> kann nothing liefern
ScopedSinglton.ContainsInstance(OF Imyservice)(profilescope.current

    soddass man auch fallbacks machen kann!!! nach oben
    
ScopedSinglton.RemoveInstance(OF Imyservice)(dispose as boolean)



profilescope.current.ClearInastances(dispose as boolean)  [IScopedSingletonContainer.ClearInastances]


automatische registireung -> appdomai shutdon schließt alle scopes!!!





ProfileScope.BindCurrentCallTo("TESTPROFIL")  as callbindinghandle (IDisposable)
Using ProfileScope.BindCurrentCallTo("TESTPROFIL").Unbind(=Dispose)
















